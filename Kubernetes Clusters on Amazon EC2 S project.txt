Kubernetes Clusters on Amazon EC2 Spot
The project aims to set up Kubernetes clusters on Amazon EC2 Spot with 100% adherence to the best practices. Kubernetes is open-source and extremely popular in the cloud computing industry with abundant real-world applications. It is an excellent AWS project for beginners developing AWS and Kubernetes skills. Amazon EC2 is one of the foundational services of AWS, and you will have to work on the same. The service gets dynamic computing capabilities on the cloud. You shall take a step ahead and use Amazon EC2 Spot instances for this project. These instances and Kubernetes follow the same approach towards containers, so you will have the option to use both of them. In this project, you can build multiple node groups. Also, you shall focus on capacity optimization for allocation. It will make sure that the functions of the worker nodes are adequate.Â  write a source code using python and BashSure, I can help you with that. Here's a sample source code using Python and Bash to set up a Kubernetes cluster on Amazon EC2 Spot instances.
Python Script (setup_k8s_cluster.py)
pythonCopy codeimport boto3
 program :
import botocore
import time

# Create EC2 client
ec2 = boto3.client('ec2')

# Define the Spot Instance request
spot_instance_request = ec2.request_spot_instances(
    SpotPrice="0.01",  # Replace with desired Spot price
    InstanceCount=3,  # Number of instances to launch
    LaunchSpecification={
        'ImageId': 'ami-0abcdef1234567',  # Replace with desired AMI ID
        'KeyName': 'your-key-pair',  # Replace with your key pair name
        'SecurityGroupIds': ['sg-0abcdef1234567'],  # Replace with your security group ID
        'InstanceType': 't2.micro',  # Replace with desired instance type
        'IamInstanceProfile': {
            'Name': 'your-iam-instance-profile'  # Replace with your IAM instance profile name
        },
        'UserData': '''#!/bin/bash
                    # Install Kubernetes components
                    apt-get update
                    apt-get install -y apt-transport-https
                    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
                    echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
                    apt-get update
                    apt-get install -y kubelet kubeadm kubectl
                    '''
    }
)

# Get the Spot Request ID
spot_request_id = spot_instance_request['SpotInstanceRequests'][0]['SpotInstanceRequestId']

# Wait for the instances to be running
waiter = ec2.get_waiter('spot_instance_request_fulfilled')
waiter.wait(SpotInstanceRequestIds=[spot_request_id])

# Get the instance details
reservations = ec2.describe_spot_instance_requests(SpotInstanceRequestIds=[spot_request_id])['SpotInstanceRequests']
instance_ids = [r['InstanceId'] for r in reservations]

# Initialize the Kubernetes cluster
for instance_id in instance_ids:
    instance = ec2.describe_instances(InstanceIds=[instance_id])['Reservations'][0]['Instances'][0]
    public_ip = instance['PublicIpAddress']
    print(f"Initializing Kubernetes cluster on {public_ip}")
    # Run the necessary commands to initialize the Kubernetes cluster

program :
Bash Script (initialize_k8s_cluster.sh)

bashCopy code#!/bin/bash

# Initialize the Kubernetes cluster on the first instance
MASTER_IP=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=instance-type,Values=t2.micro" --query "Reservations[*].Instances[*].PublicIpAddress" --output=text | head -n 1)

# Run the kubeadm init command on the master node
ssh -o StrictHostKeyChecking=no -i your-key-pair.pem ubuntu@$MASTER_IP 'sudo kubeadm init --pod-network-cidr=10.244.0.0/16'

# Configure kubectl on the master node
ssh -o StrictHostKeyChecking=no -i your-key-pair.pem ubuntu@$MASTER_IP 'mkdir -p $HOME/.kube && sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && sudo chown $(id -u):$(id -g) $HOME/.kube/config'

# Install the pod network addon (e.g., Calico)
ssh -o StrictHostKeyChecking=no -i your-key-pair.pem ubuntu@$MASTER_IP 'kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml'

# Get the join command for worker nodes
JOIN_COMMAND=$(ssh -o StrictHostKeyChecking=no -i your-key-pair.pem ubuntu@$MASTER_IP 'sudo kubeadm token create --print-join-command')

# Join worker nodes to the cluster
WORKER_IPS=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=instance-type,Values=t2.micro" --query "Reservations[*].Instances[*].PublicIpAddress" --output=text | tail -n +2)

for WORKER_IP in $WORKER_IPS; do
    ssh -o StrictHostKeyChecking=no -i your-key-pair.pem ubuntu@$WORKER_IP "$JOIN_COMMAND"
done

echo "Kubernetes cluster setup complete!"
Usage

Replace the placeholders in the Python script (setup_k8s_cluster.py) with your desired values, such as the AMI ID, key pair name, security group ID, instance type, and IAM instance profile name.
Run the Python script to create the EC2 Spot instances and install the required Kubernetes components.
Run the Bash script (initialize_k8s_cluster.sh) to initialize the Kubernetes cluster on the master node, configure kubectl, install the pod network addon (in this case, Calico), and join the worker nodes to the cluster.

Note: Make sure you have the AWS CLI installed and configured with appropriate credentials. Also, ensure that the instances have the necessary permissions to perform the required actions.
This is a basic example, and you may need to customize it further based on your specific requirements and environment. Additionally, you should consider implementing best practices such as monitoring, logging, and securing the Kubernetes cluster.